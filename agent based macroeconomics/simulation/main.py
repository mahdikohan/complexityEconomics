import random
import matplotlib.pyplot as plt
from collections import Counter

#   Considerations:
##      Without a government or central banks
##      Exclude growth
##      Fundamental time unit is day
##      Month is defined as coherent days


# Initial variables
num_households = 1000
num_firms = 100
days_of_month = 21              # days
epoc = 500                      # years * 12


# Define entities
class household:
    def __init__(self, init_firmId) -> None:

        # Each household just work in one firm in a same time then -> l_h=1
        self.firmId = init_firmId

        # The reservation wage defines a minimal claim on labor income
        self.wage = random.randrange(15080,89000,70)

        # The amount of monetary units the household currently possesses
        self.liquidity = random.randrange(0,15000,10)
        
    def consumption(self) -> int:
        pass

    def current_liquidity(self, m_t_1, income_t_1, spending_t_1) -> int:
        m_t_h = m_t_1 + income_t_1 - spending_t_1
        return m_t_h
    
    # If the household is unemployed, he visits a randomly 
    # chosen firm to check whether there is an open position.
    def get_new_position(self):
        pass
    

    # Households are picked in a random order to execute their goods demand.
    def execute_demand(self):
        pass


class firm:
    def __init__(self) -> None:
        self.liquidity = None
        self.wage = random.randrange(15080,89000,70)
        # certain critical bounds
        self.critical_inventory = [15080,(89000+15080)/2]
        self.inventory = random.randrange(15080,89000,70)
        self.employees = random.randrange(5,10)           # Labor
    

    # It means good prices
    def price(self):
        pass



    # firm has to decide on how to set its wage rate based on past
    # success or failure to find workers at the offered wage rate.
    def determine_wage_rate(self):
        # Wage adjustment
        pass

    
    def determine_number_employee(self):
        pass


    def determine_price(self):
        pass


    def execute_production(self):
        # we assume a production technology that is a linear function of labor input.
        pass


    # first order
    def pay_wage(self):
        pass

    # second order
    def build_buffer(self):
        pass
    
    # third order
    def pay_profit(self):
        """all remaining liquidity of the firm is 
        distributed as profit among all households
        Rich households have higher claims on firmsâ€™
        profits than poor ones."""
        pass


households = []
firms = []


if __name__ == "__main__":
    # we considered equality is init state then, also all parameter
    # generated by the equal shares
    for h in range(0,num_households):
        households.append(household(random.randint(0,num_firms)))
    
    
    # show init each firm labor counts
    lf = []
    for h in households:
        lf.append(h.firmId)

    count = Counter(lf)

    for key, value in count.items():
        print(f"{key}: {value}")

    plt.hist(lf)
    plt.show()

    # Begining of the month first step of simulation

    # Next step is starting the day

    # After all households and firms have performed their daily actions, the next day starts
    pass
